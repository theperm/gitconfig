[user]
    name = Jonathan Garrett (e20157)
    email = Jonathan.Garrett@cmegroup.com
[core]
	autocrlf = true

[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse
    local = cyan
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
	whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    default = upstream
[pull]
    default = current

[branch]
  autosetuprebase = always
[apply]
  whitespace = nowarn

[alias]
#https://github.com/durdn/cfg/blob/master/.gitconfig

cp = cherry-pick
s = status -s
st = status
cl = clone
ci = commit
cm = commit -m
cma = commit -a -m
ca = commit --amend
amend = commit --amend --no-edit
amendm = commit --amend -m
caa = commit -a --amend -C HEAD
filelog = log -u
fl = log -u
co = checkout
cot = checkout --track
br = branch 
bra = branch -ra
brav = branch -rav
branch = branch -ra
untrack = rm --cached
fecth = fetch

type = cat-file -t
dump = cat-file -p

ai = add --interactive

#reset commands
r = reset
r1 = reset HEAD^
r2 = reset HEAD^^
rh = reset --hard
rh1 = reset --hard HEAD^ 
rh2 = reset --hard HEAD^^
rs = reset --soft
rs1 = reset --soft HEAD^
rs2 = reset --soft HEAD^^

#git svn
svnr = svn rebase
svnd = svn dcommit
svnl = svn log --oneline --show-commit

#stash
sl = stash list
sa = stash apply
ss = stash save
sp = stash pop 
sc = stash clear
sd = stash drop

#assume aliases
assume = update-index --assume-unchanged
unassume = update-index --no-assume-unchanged
#show assumed files
assumed = "!git ls-files -v | grep ^h | cut -c 3-"
#unassume all the assumed files
unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

# tags
lasttag = describe --tags --abbrev=0
lt = describe --tags --abbrev=0
pt = push --tags

#merges
ours = "!f() { git co --ours $@ && git add $@; }; f"
theirs = "!f() { git co --theirs $@ && git add $@; }; f"

#list remotes
rem="!git config -l | grep remote.*url | tail -n +2"

#apply patch from other local repo
lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

#subtree add
sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 

#list commands
le = log --oneline --decorate
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
lc  = "!f() { git ll "$1"^.."$1"; }; f"
lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

ignored = ls-files -o -i --exclude-standard
ign = ls-files -o -i --exclude-standard

#list all aliases
la = "!git config -l | grep alias | cut -c 7-"

diff = diff --word-diff
d = diff --word-diff
dc = diff --cached
ds = diff --staged

#http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/

#list modified files in last commit
dl = "!git ll -1"

#diff last commit
dlc = diff --cached HEAD^
dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
diffr  = "!f() { git diff "$1"^.."$1"; }; f"

lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(bold yellow)%d%C(reset)%C(reset) %C(white)%s%C(reset) %C(dim white)- %C(yellow)%an%C(reset)' --all
lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %C(yellow)%an%C(reset)' --all
lg = !"git lg1 -n 20"
llog = log --date=local

lc = log ORIG_HEAD.. --stat --no-merges

changes=diff --name-status -r
diffstat=diff --stat -r

new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

prune-all = !git remote | xargs -n 1 git remote prune

# Finding files and content inside files (grep)
f = "!git ls-files | grep -i"

#grep from root folder
gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

grep = grep -Ii
gr = grep -Ii

#rename branch tree to done-
done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"


[gui]
    recentrepo = C:/workspace/source/cmed_perf_repos/cmed_perf

[merge]
    keepBackup = false;
    tool = p4merge
#   tool = bc3

[mergetool "p4merge"]
    #cmd = \"c:/workspace/oss/perforce/p4merge.exe\" \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
    path = c:/workspace/oss/Perforce/p4merge.exe

[mergetool "bc3"]
    path = c:/program files (x86)/beyond compare 3/bcomp.exe

[diff]
    memonicprefix = true
    tool = p4merge
    
[difftool "p4mergetool"]
    path = c:/workspace/oss/Perforce/p4merge.exe
    cmd = \"c:/workspace/oss/perforce/p4merge.exe\" \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"

[difftool "bc3"]
    path = c:/program files (x86)/beyond compare 3/bcomp.exe

#[difftool "sourcetree"]
#	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
#	path = 
#[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
#	trustExitCode = true

[rerere]
	enabled = true
